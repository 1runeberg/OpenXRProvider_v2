/* Copyright 2023 Rune Berg (GitHub: https://github.com/1runeberg, Twitter: https://twitter.com/1runeberg, YouTube: https://www.youtube.com/@1RuneBerg)
 *
 * Based on Pull Request #2 by Charlotte Gore (GitHub: https://github.com/charlottegore)
 * SPDX-License-Identifier: MIT
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 *  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 *  DAMAGE.
 *
 */

// Generated by cmake by populating project_config.h.in
#include "project_config.h"

#include <chrono>
#include <cstdlib>
#include <future>
#include <iomanip>
#include <iostream>
#include <thread>

#include <openxr_provider.h>
#include <xrvk/xrvk.hpp>

#ifdef LINUX
	#include <unistd.h>
#endif
#ifdef WINDOWS
	#include <windows.h>
#endif

#define APP_NAME "htcx_vive_tracker_interaction"
#define ENGINE_NAME "openxr_provider"

#define LOG_CATEGORY_DEMO_EXT "ExtViveTracker"

// global vars
XrEventDataBaseHeader *g_xrEventDataBaseheader = nullptr;

// Pointer to the the xrvk renderer class
std::unique_ptr< xrvk::Render > g_pRender = nullptr;

// Pointer to input handling object of the openxr provider library
oxr::Input *g_pInput = nullptr;

// Current openxr session state
XrSessionState g_sessionState = XR_SESSION_STATE_UNKNOWN;

// Vive Tracker Extension, if present
oxr::ExtHTCXViveTrackerInteraction *g_extViveTracker = nullptr;

// Future for input thread
std::future< XrResult > g_inputThread;

// Reference to the pose action (used for aim pose painting)
oxr::Action *g_ControllerPoseAction = nullptr;

// Latest openxr framestate - this is filled in on the render call
XrFrameState g_xrFrameState { XR_TYPE_FRAME_STATE };

// Projection views and layers to be rendered
std::vector< XrCompositionLayerProjectionView > g_vecFrameLayerProjectionViews;
std::vector< XrCompositionLayerBaseHeader * > g_vecFrameLayers;

// Pointer to session handling object of the openxr provider library
oxr::Session *g_pSession = nullptr;

// Render models used in this demo
struct renderModels
{
	uint32_t leftController = 0;
	uint32_t rightController = 0;

	std::vector<uint32_t> vecTrackers;
} g_renderModels;

/**
 * These are utility functions to check game loop conditions
 * For android, we need to be able to check the app state as well
 * so we can process android events data at the appropriate times.
 */
#ifdef XR_USE_PLATFORM_ANDROID
static void app_handle_cmd(struct android_app* app, int32_t cmd)
{
	oxr::AndroidAppState* appState = (oxr::AndroidAppState*)app->userData;

	switch (cmd)
	{
	case APP_CMD_RESUME:
	{
		appState->Resumed = true;
		break;
	}
	case APP_CMD_PAUSE:
	{
		appState->Resumed = false;
		break;
	}
	case APP_CMD_DESTROY:
	{
		appState->NativeWindow = NULL;
		break;
	}
	case APP_CMD_INIT_WINDOW:
	{
		appState->NativeWindow = app->window;
		break;
	}
	case APP_CMD_TERM_WINDOW:
	{
		appState->NativeWindow = NULL;
		break;
	}
	}
}

bool CheckGameLoopExit(oxr::Provider* oxrProvider) { return oxrProvider->Instance()->androidApp->onAppCmd = app_handle_cmd; }

#else
bool CheckGameLoopExit(oxr::Provider* oxrProvider) { return oxrProvider->Session()->GetState() != XR_SESSION_STATE_EXITING; }
#endif


/**
 * These are callback functions that would be registered with the
 * openxr provider to handle render calls at appropriate times in
 * the application.
 */
void PreRender_Callback(uint32_t unSwapchainIndex, uint32_t unImageIndex)
{
	if (g_xrFrameState.shouldRender)
	{
		// Render
		g_pRender->BeginRender(g_pSession, g_vecFrameLayerProjectionViews, &g_xrFrameState, unSwapchainIndex, unImageIndex, 0.1f, 10000.f);

	}
}

void PostRender_Callback(uint32_t unSwapchainIndex, uint32_t unImageIndex) { g_pRender->EndRender(); }