/* Copyright 2023 Charlotte Gore (GitHub: https://github.com/charlottegore)
 * and Rune Berg (GitHub: https://github.com/1runeberg, Twitter: https://twitter.com/1runeberg, YouTube: https://www.youtube.com/@1RuneBerg)
 *
 *  SPDX-License-Identifier: MIT
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 *  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 *  DAMAGE.
 *
 */


// Generated by cmake by populating project_config.h.in
#include "project_config.h"

#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <future>
#include <chrono>
#include <thread>

#include <openxr_provider.h>

#ifdef LINUX
	#include <unistd.h>
#endif
#ifdef WINDOWS
	#include <windows.h>
#endif

#define APP_NAME "sample_xx_headless"
#define ENGINE_NAME "openxr_provider"

#define LOG_CATEGORY_HEADLESS "OpenXRProviderHeadless"

// global vars
XrEventDataBaseHeader *g_xrEventDataBaseheader = nullptr;

// Pointer to input handling object of the openxr provider library
oxr::Input *g_pInput = nullptr;

// Current openxr session state
XrSessionState g_sessionState = XR_SESSION_STATE_UNKNOWN;

// Vive Tracker Extension, if present
oxr::ExtHTCXViveTrackerInteraction *g_extHTCXViveTrackerInteraction = nullptr;

// Future for input thread
std::future< XrResult > g_inputThread;

// Struct for knowing which trackers are active
struct
{
	bool bIsActive = false;
} g_ActionLeftFoot;

// Struct for holding controller state.
struct ControllerActionData
{
	bool bIsActive = false;
	
	bool bAimClick = false;
	XrVector2f xrvec2Aim = {.0f, .0f};

} g_ActionLeftController, g_ActionRightController;

// Handler for the left foot pose
inline void UpdateLeftFootPose( oxr::Action *pAction, uint32_t unActionStateIndex )
{
	g_ActionLeftFoot.bIsActive = pAction->vecActionStates[ unActionStateIndex ].statePose.isActive;
}

// Handler for the controller pose action
inline void UpdateControllerPose( oxr::Action *pAction, uint32_t unActionStateIndex )
{
	if ( unActionStateIndex == 0 )
		g_ActionLeftController.bIsActive = pAction->vecActionStates[ unActionStateIndex ].statePose.isActive;
	else
		g_ActionRightController.bIsActive = pAction->vecActionStates[ 1 ].statePose.isActive;
}

// Handler for the Aim Vector2f Action
inline void UpdateAim( oxr::Action *pAction, uint32_t unActionStateIndex ) { 
	if ( unActionStateIndex == 0 )
		g_ActionLeftController.xrvec2Aim = pAction->vecActionStates[ unActionStateIndex ].stateVector2f.currentState;
		else
		g_ActionRightController.xrvec2Aim = pAction->vecActionStates[ unActionStateIndex ].stateVector2f.currentState;
}

// Handler for the Aim Boolean Action
inline void UpdateAimClick( oxr::Action *pAction, const uint32_t unActionStateIndex )
{
	if ( unActionStateIndex == 0 )
		g_ActionLeftController.bAimClick = pAction->vecActionStates[ unActionStateIndex ].stateBoolean.currentState;
	else
		g_ActionRightController.bAimClick = pAction->vecActionStates[ unActionStateIndex ].stateBoolean.currentState;
}

// Reference to left elbow pose action
oxr::Action *g_leftFootPoseAction = nullptr;

// Reference to controller pose action
oxr::Action *g_controllerPoseAction = nullptr;

// Latest openxr framestate - this is filled in on the render call
XrFrameState g_xrFrameState { XR_TYPE_FRAME_STATE };

// Pointer to session handling object of the openxr provider library
oxr::Session *g_pSession = nullptr;
